name: Generate and Deploy Site

on:
  push:
    branches:
      - main
    paths:
      - 'content/**'
  workflow_dispatch:  # Allow manual triggering for testing

jobs:
  generate-and-deploy:
    runs-on: ubuntu-latest
    environment: DREAMHOST_SSH_KEY
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper git operations
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('scripts/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
      
      - name: Parse content
        run: |
          echo "📝 Parsing content files..."
          python scripts/content_parser.py
          if [ $? -eq 0 ]; then
            echo "✅ Content parsing completed successfully"
          else
            echo "❌ Content parsing failed"
            exit 1
          fi
      
      - name: Test script imports
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🔍 Testing script imports and basic functionality..."
          echo "Python version: $(python --version)"
          echo "Working directory: $(pwd)"
          echo "Environment variables:"
          echo "  GEMINI_API_KEY set: $([ -n "$GEMINI_API_KEY" ] && echo "yes" || echo "no")"
          echo "Installed packages:"
          pip list | grep -E "(google|pillow|numpy|pyyaml)"
          echo "Testing Python imports..."
          python -c "
          import sys
          print('Python path:', sys.path)
          try:
              import google.genai
              print('✅ google.genai imported successfully')
          except Exception as e:
              print('❌ google.genai import failed:', e)
          try:
              import PIL
              print('✅ PIL imported successfully')
          except Exception as e:
              print('❌ PIL import failed:', e)
          try:
              sys.path.append('scripts')
              from content_parser import ContentParser
              print('✅ content_parser imported successfully')
          except Exception as e:
              print('❌ content_parser import failed:', e)
          "
          echo "Testing basic script execution..."
          python -c "
          import os
          os.environ['GEMINI_API_KEY'] = os.environ.get('GEMINI_API_KEY', 'test')
          try:
              import sys
              sys.path.append('scripts')
              from generate_images import ImageGenerator
              print('✅ ImageGenerator class imported successfully')
          except Exception as e:
              print('❌ ImageGenerator import failed:', e)
              import traceback
              traceback.print_exc()
          "
          
      - name: Check for committed images
        run: |
          echo "🎨 Checking for locally generated images..."
          if [ -d "generated/images" ] && [ -n "$(ls -A generated/images 2>/dev/null)" ]; then
            image_count=$(find generated/images -name "*.png" | wc -l | tr -d ' ')
            echo "✅ Found $image_count committed images from local generation"
            echo "📸 Using locally generated images (no cloud generation needed)"
            echo "NEW_IMAGES_GENERATED=false" >> $GITHUB_ENV
          else
            echo "⚠️ No images found in generated/images/ directory"
            echo "   This suggests images weren't committed from local generation"
            echo "   Please run './bin/preview-and-check.sh' locally first"
            exit 1
          fi
      
      - name: Build static site
        run: |
          echo "🔨 Building static site..."
          python scripts/build_site.py
          if [ $? -eq 0 ]; then
            echo "✅ Site build completed successfully"
            # List output directory contents for verification
            echo "📁 Output directory contents:"
            ls -la output/
          else
            echo "❌ Site build failed"
            exit 1
          fi
      
      - name: Setup SSH key for deployment
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DREAMHOST_SSH_KEY }}
        run: |
          echo "🔐 Setting up SSH key..."
          echo "SSH key environment variable set: $([ -n "$SSH_PRIVATE_KEY" ] && echo "yes" || echo "no")"
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "SSH key file size: $(wc -c < ~/.ssh/deploy_key) bytes"
          echo "SSH key first line: $(head -1 ~/.ssh/deploy_key)"
          echo "SSH key last line: $(tail -1 ~/.ssh/deploy_key)"
          # Validate SSH key format
          ssh-keygen -l -f ~/.ssh/deploy_key || echo "⚠️ SSH key validation failed"
          # Add DreamHost to known hosts to prevent interactive prompt
          ssh-keyscan -H iad1-shared-e1-05.dreamhost.com >> ~/.ssh/known_hosts 2>/dev/null
          echo "✅ SSH key setup completed"
      
      - name: Deploy to DreamHost
        run: |
          echo "🚀 Deploying to DreamHost..."
          # Use rsync with proper flags for static site deployment
          rsync -avz --delete \
            -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            output/ \
            rennie@iad1-shared-e1-05.dreamhost.com:/home/rennie/rennie.org/
          
          if [ $? -eq 0 ]; then
            echo "✅ Deployment completed successfully"
            echo "🌐 Site is live at https://rennie.org"
          else
            echo "❌ Deployment failed"
            exit 1
          fi
      
      - name: Verify image consistency
        run: |
          echo "🔍 Verifying locally generated images are properly committed..."
          
          # Count content files vs images
          content_count=$(find content/inspiration -name "*.md" | wc -l | tr -d ' ')
          image_count=$(find generated/images -name "*.png" | wc -l | tr -d ' ')
          
          echo "📄 Content files: $content_count"
          echo "🖼️ Image files: $image_count"
          
          if [ $image_count -ge $content_count ]; then
            echo "✅ Image count matches or exceeds content (good)"
          else
            echo "⚠️ Missing images detected:"
            echo "   Content: $content_count, Images: $image_count"
            echo "   Please ensure all content has corresponding images"
            echo "   Run './bin/preview-and-check.sh' locally to generate missing images"
          fi
          
          echo "🎯 Using locally generated images for deployment consistency"
      
      - name: Cleanup sensitive data
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          rm -f ~/.ssh/deploy_key
          echo "✅ Cleanup completed"
      
      - name: Report summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **Deployment successful!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🌐 Site is live at: [rennie.org](https://rennie.org)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above for error details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Steps completed:" >> $GITHUB_STEP_SUMMARY
          echo "- Content parsing" >> $GITHUB_STEP_SUMMARY
          echo "- Image generation (new content only)" >> $GITHUB_STEP_SUMMARY
          echo "- Static site build" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment to DreamHost" >> $GITHUB_STEP_SUMMARY
          
          if [ "$NEW_IMAGES_GENERATED" == "true" ]; then
            echo "- New images committed to repository" >> $GITHUB_STEP_SUMMARY
          fi